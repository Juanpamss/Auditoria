/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package auditoria;

import static auditoria.anomaliasDatos.res;
import java.sql.ResultSetMetaData;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juan Pa
 */
public class integridadDatos extends javax.swing.JFrame {

    /**
     * Creates new form integridadDatos
     */
    ArrayList<String[]> datosToken;

    public integridadDatos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tabla", "Campo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");

        jLabel1.setText("Se encontraron las siguientes anomal√≠as, se sugiere revisar manualmente lo siguiente:");

        jMenu1.setText("Accion");

        jMenuItem1.setText("Inicio");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(77, 77, 77))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jLabel1))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(8, 8, 8))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String query = "SELECT \n"
                + "        o.Name AS Table_Name, \n"
                + "        c.Name AS Field_Name,\n"
                + "        t.Name AS Data_Type\n"
                + "FROM sys.columns c \n"
                + "     INNER JOIN sys.objects o ON o.object_id = c.object_id\n"
                + "     LEFT JOIN  sys.types t on t.user_type_id  = c.user_type_id   \n"
                + "WHERE o.type = 'U'\n"
                + "and o.Name not like 'dbcc_history'\n"
                + "-- and o.Name = 'YourTableName'\n"
                + "ORDER BY o.Name, c.Name";

        res = coneccionBDD.baseDatos.consulta(query);

        try {

            datosToken = new ArrayList<>();

            while (res.next()) {

                ResultSetMetaData rsmd = res.getMetaData();
                int columnsNumber = rsmd.getColumnCount();

                String aux = "";

                for (int i = 1; i <= columnsNumber; i++) {

                    if (i > 1) {
                        //System.out.print(",");
                    }

                    //System.out.print(res.getString(i));
                    if (i == 1) {

                        aux += res.getString(i) + ",";

                    } else if (i == 2) {

                        aux += res.getString(i) + ",";

                    } else if (i == 3) {

                        aux += res.getString(i);

                    }

                    //tokenizar(res.getString(i));
                }

                //System.out.println(aux);
                tokenizar(aux);

                //datos.put(res.getString(1), res.getString(2));
            }

            
        } catch (Exception e) {
        }

        analizar();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        this.dispose();
        main main = new main();
        main.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(integridadDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(integridadDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(integridadDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(integridadDatos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new integridadDatos().setVisible(true);
            }
        });
    }

    public void tokenizar(String dato) {

        StringTokenizer tokens = new StringTokenizer(dato, ",");
        int nDatos = tokens.countTokens();
        int i = 0;

        String auxiliar[] = new String[nDatos];

        while (tokens.hasMoreTokens()) {
            String str = tokens.nextToken();

            auxiliar[i] = str;
            //System.out.println("Arreglo T: " + tokens.nextToken()+tokens.nextToken() );
            i++;
        }

        datosToken.add(auxiliar);

    }

    public void analizar() {
        
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();

        modelo.setRowCount(0);

        ArrayList<Integer> validacion;

        for (int i = 0; i < datosToken.size(); i++) {

            String auxActual[] = datosToken.get(i);

            if (auxActual[2].equals("int") || auxActual[2].equals("smallint")) {

                String query = "SELECT ISNUMERIC(" + auxActual[0] + "." + auxActual[1] + ") from " + auxActual[0];

                System.out.println("query: " + query);

                res = coneccionBDD.baseDatos.consulta(query);

                try {

                    validacion = new ArrayList<>();

                    while (res.next()) {

                        validacion.add(res.getInt(1));

                    }

                    System.out.println(validacion.size());

                    for (int k = 0; k < validacion.size(); k++) {

                        if (validacion.get(k) == 0) {

                            System.out.println("Anomalias en tabla: " + auxActual[0] + ", campo: " + auxActual[1]);

                            Object rowData[] = new Object[2];

                            rowData[0] = auxActual[0];
                            rowData[1] = auxActual[1];

                            modelo.addRow(rowData);

                        } else {

                            System.out.println("No hay");
                        }

                    }

                } catch (Exception e) {
                }

            } else if (auxActual[2].equals("varchar") || auxActual[2].equals("char") || auxActual[2].equals("nvarchar") || auxActual[2].equals("ntext") || auxActual[2].equals("nchar")) {

                String query = "SELECT ISNUMERIC(" + auxActual[0] + "." + auxActual[1] + ") from " + auxActual[0];

                System.out.println("query: " + query);

                res = coneccionBDD.baseDatos.consulta(query);

                try {

                    validacion = new ArrayList<>();

                    while (res.next()) {

                        validacion.add(res.getInt(1));

                    }

                    System.out.println(validacion.size());

                    for (int k = 0; k < validacion.size(); k++) {

                        if (validacion.get(k) == 1) {

                            System.out.println("Anomalias en tabla: " + auxActual[0] + ", campo: " + auxActual[1]);
                            
                            Object rowData[] = new Object[2];

                            rowData[0] = auxActual[0];
                            rowData[1] = auxActual[1];

                            modelo.addRow(rowData);

                        } else {

                            System.out.println("No hay");
                        }

                    }

                } catch (Exception e) {
                }

            } else if (auxActual[2].equals("datetime")) {

                String query = "SELECT ISDATE(" + auxActual[0] + "." + auxActual[1] + ") from " + auxActual[0];

                System.out.println("query: " + query);

                res = coneccionBDD.baseDatos.consulta(query);

                try {

                    validacion = new ArrayList<>();

                    while (res.next()) {

                        validacion.add(res.getInt(1));

                    }

                    System.out.println(validacion.size());

                    for (int k = 0; k < validacion.size(); k++) {

                        if (validacion.get(k) == 0) {

                            System.out.println("Anomalias en tabla: " + auxActual[0] + ", campo: " + auxActual[1]);
                            
                            Object rowData[] = new Object[2];

                            rowData[0] = auxActual[0];
                            rowData[1] = auxActual[1];

                            modelo.addRow(rowData);

                        } else {

                            System.out.println("No hay");
                        }

                    }

                } catch (Exception e) {
                }

            } else if (auxActual[2].equals("money")) {

                String query = "SELECT ISNUMERIC(" + auxActual[0] + "." + auxActual[1] + ") from " + auxActual[0];

                System.out.println("query: " + query);

                res = coneccionBDD.baseDatos.consulta(query);

                try {

                    validacion = new ArrayList<>();

                    while (res.next()) {

                        validacion.add(res.getInt(1));

                    }

                    System.out.println(validacion.size());

                    for (int k = 0; k < validacion.size(); k++) {

                        if (validacion.get(k) == 0) {

                            System.out.println("Anomalias en tabla: " + auxActual[0] + ", campo: " + auxActual[1]);
                            
                            Object rowData[] = new Object[2];

                            rowData[0] = auxActual[0];
                            rowData[1] = auxActual[1];

                            modelo.addRow(rowData);

                        } else {

                            System.out.println("No hay");
                        }

                    }

                } catch (Exception e) {
                }

            }

        }

        jTable1.setModel(modelo);
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
